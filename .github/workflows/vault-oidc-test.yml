name: üõ†  Test Vault OIDC Login

# we‚Äôll trigger it manually
on:
  workflow_dispatch:

permissions:
  contents: read    # needed for checkout
  id-token: write   # needed to mint GitHub OIDC token

jobs:
  vault-login:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Vault via OIDC
        id: vault_login
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          namespace: admin               # your HCP namespace
          method: jwt
          path: jwt-github-actions       # the mount path you created
          role: ci-pipeline              # the Vault role_name

      - name: Show Vault token
        run: |
          echo "Got token: ${{ steps.vault_login.outputs.client_token }}"

      - name: Fetch TFE encryption key from Vault
        id: fetch_tfe
        uses: hashicorp/vault-action@v2
        with:
          url:       ${{ secrets.VAULT_ADDR }}
          namespace: admin
          # reuse the token from your jwt login:
          method:    token
          token:     ${{ steps.vault_login.outputs.client_token }}
          secrets: |
            # KV-v2 data path is ‚Äúkv/data/<name>‚Äù, not metadata
            - path: kv/data/tfe_config
              env:
                TFE_ENCRYPTION: data.data.tfe_encryption

      - name: Show TFE encryption key
        run: echo "TFE_ENCRYPTION=${TFE_ENCRYPTION}"
        env:
          TFE_ENCRYPTION: ${{ steps.fetch_tfe.outputs.TFE_ENCRYPTION }}

      # (optional) read a specific secret to prove it works:
      #- name: Read demo secret
      #  env:
      #    VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      #    VAULT_NAMESPACE: admin
      #    VAULT_TOKEN: ${{ steps.vault_login.outputs.client_token }}
      #  run: vault kv get secret/data/demo
