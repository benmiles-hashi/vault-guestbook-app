name: ðŸ›   Test Vault OIDC Login

# weâ€™ll trigger it manually
on:
  workflow_dispatch:

permissions:
  contents: read    # needed for checkout
  id-token: write   # needed to mint GitHub OIDC token

env:
  # No need to pass as inputs to each action
  TF_CLOUD_ORGANIZATION: "ben-miles-org"
  TF_WORKSPACE: "my-workspace"
  TF_DIRECTORY: "./terraform/vault"

jobs:
  vault-login:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Vault via OIDC
        id: vault_login
        uses: hashicorp/vault-action@v2
        with:
          url: https://ben-vault-1-public-vault-9257d029.b416a999.z1.hashicorp.cloud:8200
          namespace: admin               # your HCP namespace
          method: jwt
          path: jwt-github-actions       # the mount path you created
          role: ci-pipeline              # the Vault role_name
          exportToken: true

      - name: Show Vault token
        run: |
          echo "Got token: ${{ steps.vault_login.outputs.client_token }}"

      - name: Debug the exported token
        run: |
          echo "VAULT_TOKEN is set to: $VAULT_TOKEN"

      - name: Fetch TFC API token from Vault
        id: fetch_tfc
        uses: hashicorp/vault-action@v2
        with:
          url:       ${{ secrets.VAULT_ADDR }}
          namespace: admin
          method:    token
          token:     ${{ env.VAULT_TOKEN }}
          secrets: |
            terraform-github/creds/ci token | TF_API_TOKEN

      - name: Debug TFC token length
        run: echo "TF_API_TOKEN has length ${#TF_API_TOKEN}"

      - name: Create test workspace in Terraform Cloud
        run: |
          curl --fail \
            --header "Authorization: Bearer ${{ steps.fetch_tfc.outputs.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "attributes": {
                  "name": "${{ env.TF_WORKSPACE }}",
                  "auto-apply": false
                },
                "type": "workspaces"
              }
            }' \
            https://app.terraform.io/api/v2/organizations/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces \
          && echo "âœ… ${{ env.TF_WORKSPACE }}"
        env:
          TFC_TOKEN: ${{ steps.fetch_tfc.outputs.TF_API_TOKEN }}

      - name: Fetch TFE encryption key from Vault
        id: fetch_tfe
        uses: hashicorp/vault-action@v2
        with:
          url:       https://ben-vault-1-public-vault-9257d029.b416a999.z1.hashicorp.cloud:8200
          namespace: admin
          method:    token
          token: ${{ env.VAULT_TOKEN }}
          secrets: |
            kv/data/tfe_config tfe_encryption | TFE_ENCRYPTION

      - name: Show TFE encryption key
        run: echo "TFE_ENCRYPTION=${TFE_ENCRYPTION}"
        env:
          TFE_ENCRYPTION: ${{ steps.fetch_tfe.outputs.TFE_ENCRYPTION }}


      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.2
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ./terraform/vault
          speculative: true
          token: ${{ steps.fetch_tfc.outputs.TF_API_TOKEN }}

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.2
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true
          token: ${{ steps.fetch_tfc.outputs.TF_API_TOKEN }}

      - name: Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.2
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
          token: ${{ steps.fetch_tfc.outputs.TF_API_TOKEN }}

    #  - name: Apply Run
    #    uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.2
    #    if: github.ref == 'refs/heads/main'
    #   with:
    #      workspace: ${{ secrets.TFC_WORKSPACE }}
    #      run: ${{ steps.plan-run.outputs.run_id }}

