name: ðŸ›   Test Vault OIDC Login

# weâ€™ll trigger it manually
on:
  workflow_dispatch:

permissions:
  contents: read    # needed for checkout
  id-token: write   # needed to mint GitHub OIDC token

jobs:
  vault-login:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Vault via OIDC
        id: vault_login
        uses: hashicorp/vault-action@v2
        with:
          url: https://ben-vault-1-public-vault-9257d029.b416a999.z1.hashicorp.cloud:8200
          namespace: admin               # your HCP namespace
          method: jwt
          path: jwt-github-actions       # the mount path you created
          role: ci-pipeline              # the Vault role_name
          exportToken: true

      - name: Show Vault token
        run: |
          echo "Got token: ${{ steps.vault_login.outputs.client_token }}"

      - name: Debug the exported token
        run: |
          echo "VAULT_TOKEN is set to: $VAULT_TOKEN"

      - name: Fetch TFE encryption key from Vault
        id: fetch_tfe
        uses: hashicorp/vault-action@v2
        with:
          url:       https://ben-vault-1-public-vault-9257d029.b416a999.z1.hashicorp.cloud:8200
          namespace: admin
          method:    token
          token: $VAULT_TOKEN
          secrets: |
            kv/data/tfe_config tfe_encryption | TFE_ENCRYPTION

      - name: Show TFE encryption key
        run: echo "TFE_ENCRYPTION=${TFE_ENCRYPTION}"
        env:
          TFE_ENCRYPTION: ${{ steps.fetch_tfe.outputs.TFE_ENCRYPTION }}

      - name: Read demo secret
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_NAMESPACE: admin
          VAULT_TOKEN: ${{ steps.vault_login.outputs.client_token }}
        run: vault kv get -namespace=admin -mount="kv" "tfe_config"
